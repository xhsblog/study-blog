{"data":{"site":{"siteMetadata":{"title":"xiaohesong's Blog","author":"xiaohesong"}},"markdownRemark":{"id":"2c92d29c-2cf0-5a97-8c35-77c2128dbed9","excerpt":"编写弹性组件 当人们开始学习React时，他们经常会想要一份风格指南。虽然在项目中应用一些一致的规则是个好主意，但很多都是随意的 - 所以React对它们没有强烈的意见。 你可以使用不同的类型系统，偏向于函数声明或箭头函数，可以按字母顺序或你喜欢的顺序对props进行排序。 这种灵活性允许 集成React…","html":"<h1 id=\"编写弹性组件\"><a href=\"#%E7%BC%96%E5%86%99%E5%BC%B9%E6%80%A7%E7%BB%84%E4%BB%B6\" aria-label=\"编写弹性组件 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编写弹性组件</h1>\n<p>当人们开始学习React时，他们经常会想要一份风格指南。虽然在项目中应用一些一致的规则是个好主意，但很多都是随意的 - 所以React对它们没有强烈的意见。</p>\n<p>你可以使用不同的类型系统，偏向于函数声明或箭头函数，可以按字母顺序或你喜欢的顺序对props进行排序。</p>\n<p>这种灵活性允许<a href=\"https://reactjs.org/docs/add-react-to-a-website.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">集成React</a>到具有现有约定的项目中。但它也引发了无休止的争论。</p>\n<p><strong>每个组件都应该努力遵循一些重要的设计原则。但我不认为风格指南很好地捕获这些原则。我们先谈谈风格指南，然后再<a href=\"https://overreacted.io/writing-resilient-components/#writing-resilient-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">看看真正有用的原则</a>。</strong> </p>\n<hr>\n<h2 id=\"不要被想象中的问题分散注意力\"><a href=\"#%E4%B8%8D%E8%A6%81%E8%A2%AB%E6%83%B3%E8%B1%A1%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%95%A3%E6%B3%A8%E6%84%8F%E5%8A%9B\" aria-label=\"不要被想象中的问题分散注意力 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不要被想象中的问题分散注意力</h2>\n<p>在我们讨论组件设计原则之前，我想先谈谈风格指南。这不是一个流行的观点，但有人需要说出来!</p>\n<p>在JavaScript社区中，有一些由linter强制执行的样式指南。我个人的看法是，它们往往会产生比其价值更大的摩擦。我记不清有多少次有人向我展示了一些绝对有效的代码并说“React对这个有抱怨”，但这是他们的lint config 配置在抱怨!这导致了三个问题:</p>\n<ul>\n<li>人们习惯了把linter看作是一个 <strong>过于热情且嘈杂的守卫</strong> ，而不是一个有用的工具。有用的警告被风格的海洋淹没了。因此，人们在调试时不会扫描linter消息，并且会错过一些有用的提示。此外，不太习惯编写JavaScript的人（例如，设计人员）更难以使用代码。</li>\n<li>人们没有学会 <strong>区分有效和无效用法</strong> 的特定模式。例如，有一个流行的规则禁止在<code class=\"language-text\">componentDidMount</code>中调用<code class=\"language-text\">setState</code>。但如果它一直是“不好的”，React根本不会允许它这么使用！它有一个合法的用例，那就是测量DOM节点布局——例如定位一个工具提示。我见过有人通过添加<code class=\"language-text\">setTimeout</code>“绕过”这条规则，这完全没有抓住重点。</li>\n<li>最终，人们采用了“强制执行者心态”，并且对那些 <strong>不会带来有意义的差异</strong> 但很容易在代码中扫描的事情产生了看法。“你使用了函数声明，但我们的项目使用了箭头函数。”每当我对执行这样的规则有强烈的感觉时，深入观察一下就会发现，我在这条规则上投入了情感的努力——并努力让它消失。它诱使我产生一种错误的成就感，而没有改进我的代码。</li>\n</ul>\n<p>我是说我们应该停止linter？一点也不！</p>\n<p><strong>通过良好的配置，linter是一个很好的工具，可以在错误发生之前捕获它们。</strong> 它过于专注于 <em>风格</em> ，使其变得分散注意力。</p>\n<hr>\n<h2 id=\"marie-kondo-your-lint-config\"><a href=\"#marie-kondo-your-lint-config\" aria-label=\"marie kondo your lint config permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Marie Kondo Your Lint Config</h2>\n<p>这是我建议你周一做的。花半个小时召集你的团队，检查项目配置中启用的每一条lint规则，然后问自己: “<em>这条规则是否曾帮助我们抓住了一个错误？</em>” 如果没有，请将其<em>关闭</em>。(你也可以使用没有样式规则的<a href=\"https://www.npmjs.com/package/eslint-config-react-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">eslint-config- response -app</a>从头开始。)</p>\n<p>至少，你的团队应该有一个消除导致摩擦的规则的过程。不要以为一年前你或别人添加到你的lint配置中的任何东西都是“最佳实践”。提问并寻找答案。不要让任何人告诉你你不够聪明，以至于不能选择你的lint规则。</p>\n<p><strong>但格式呢？</strong> 使用<a href=\"https://prettier.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prettier</a>并忘记“风格”。如果另一个工具可以为你修复空间，你不需要一个工具来对你大喊大叫。使用linter查找错误，而不是强制执行错误。</p>\n<p>当然，编码风格的某些方面与格式没有直接关系，但当整个项目不一致时，仍然会令人讨厌。</p>\n<p>然而，它们中的许多都太微妙了，无法用lint规则捕捉。这就是为什么在团队成员之间 <strong>建立信任</strong> 以及以wiki页面或简短设计指南的形式分享有用的知识非常重要的原因。</p>\n<p>并非一切都值得自动化！从 <em>实际阅读</em> 这种指南的基本原理中获得的见解可能比遵循“规则”更有价值。</p>\n<p><strong>但如果遵循严格的风格指南会分散注意力，那么什么才是真正重要的呢?</strong></p>\n<p>这是这篇文章的主题。</p>\n<h2 id=\"编写弹性组件-1\"><a href=\"#%E7%BC%96%E5%86%99%E5%BC%B9%E6%80%A7%E7%BB%84%E4%BB%B6-1\" aria-label=\"编写弹性组件 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编写弹性组件</h2>\n<p>再多的缩进或按字母顺序对导入进行排序也无法修复破损的设计。因此，我不会关注某些代码的外观，而是关注它的<em>工作原理</em>。我发现有一些组件设计原则非常有用：</p>\n<ol>\n<li><a href=\"#%E5%8E%9F%E5%88%991%E4%B8%8D%E8%A6%81%E5%81%9C%E6%AD%A2%E6%95%B0%E6%8D%AE%E6%B5%81\">不要停止数据流</a></li>\n<li><a href=\"#%E5%8E%9F%E5%88%992%E5%A7%8B%E7%BB%88%E5%87%86%E5%A4%87%E5%A5%BD%E6%B8%B2%E6%9F%93\">始终准备渲染</a></li>\n<li><a href=\"#%E5%8E%9F%E5%88%993%E6%B2%A1%E6%9C%89%E7%BB%84%E4%BB%B6%E6%98%AF%E5%8D%95%E4%BE%8B%E7%9A%84\">没有组件是单例的</a></li>\n<li><a href=\"#%E5%8E%9F%E5%88%994%E4%BF%9D%E6%8C%81%E6%9C%AC%E5%9C%B0%E7%8A%B6%E6%80%81%E9%9A%94%E7%A6%BB\">保持本地状态隔离</a></li>\n</ol>\n<p>即使你不使用React，你也可能通过反复试验发现任何具有单向数据流的UI组件模型都遵循相同的原则。</p>\n<h2 id=\"原则1：不要停止数据流\"><a href=\"#%E5%8E%9F%E5%88%991%EF%BC%9A%E4%B8%8D%E8%A6%81%E5%81%9C%E6%AD%A2%E6%95%B0%E6%8D%AE%E6%B5%81\" aria-label=\"原则1：不要停止数据流 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原则1：不要停止数据流</h2>\n<h3 id=\"不要在渲染中停止数据流\"><a href=\"#%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%B8%B2%E6%9F%93%E4%B8%AD%E5%81%9C%E6%AD%A2%E6%95%B0%E6%8D%AE%E6%B5%81\" aria-label=\"不要在渲染中停止数据流 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不要在渲染中停止数据流</h3>\n<p>当有人使用你的组件时，他们希望可以随着时间的推移传递不同的props，并且该组件将反映这些更改：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// isOk可能由状态驱动，可以随时改变</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOk <span class=\"token operator\">?</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>通常，这是React默认工作的方式。如果在<code class=\"language-text\">Button</code>组件中使用<code class=\"language-text\">color</code> prop，你将看到上面为该渲染提供的值：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ✅ `color` is always fresh!</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是，学习React时常见的错误是将props复制到状态：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token comment\">//这里</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 `color` is stale!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你使用React之外的类，乍一看这似乎更直观。<strong>但是，通过将prop复制到状态，你忽略了对它的所有更新。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 🔴 不再适用于上述实现的更新</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOk <span class=\"token operator\">?</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>在极少数情况下，这种行为是故意的，请确保调用该prop<code class=\"language-text\">initialColor</code>或<code class=\"language-text\">defaultColor</code>，以澄清对它的更改将被忽略。</p>\n<p>但通常你会想 <strong>直接在你的组件中读取props</strong> ，并避免将props（或从props计算的任何东西）复制到状态：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ✅ `color` is always fresh!</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>计算值是人们有时尝试将props复制到州的另一个原因。例如，假设我们以背景<code class=\"language-text\">color</code>为参数，通过代价高昂的计算来确定 <em>按钮文本</em> 的颜色:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    textColor<span class=\"token punctuation\">:</span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span>\n        <span class=\"token string\">' Button-text-'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>textColor <span class=\"token comment\">// 🔴 Stale on `color` prop updates</span>\n      <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个组件有问题，因为它不会在<code class=\"language-text\">color</code> prop 更改时重新计算<code class=\"language-text\">this.state.textColor</code>。最简单的解决方法是将<code class=\"language-text\">textColor</code>计算移动到<code class=\"language-text\">render</code>方法中，并将其设为<code class=\"language-text\">PureComponent</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textColor <span class=\"token operator\">=</span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span>\n        <span class=\"token string\">' Button-text-'</span> <span class=\"token operator\">+</span> textColor <span class=\"token comment\">// ✅ Always fresh</span>\n      <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>问题解决了！现在如果props改变了，我们将重新计算<code class=\"language-text\">textColor</code>，但我们避免在相同的道具上进行昂贵的计算。</p>\n<p>但是，我们可能希望进一步优化它。如果改变了<code class=\"language-text\">children</code> prop怎么办？在这种情况下重新计算<code class=\"language-text\">textColor</code>似乎很不好。我们的第二个尝试可能是调用<code class=\"language-text\">componentDidUpdate</code>中的计算:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    textColor<span class=\"token punctuation\">:</span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 😔 Extra re-render for every update</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        textColor<span class=\"token punctuation\">:</span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span>\n        <span class=\"token string\">' Button-text-'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>textColor <span class=\"token comment\">// ✅ Fresh on final render</span>\n      <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而，这将意味着我们的组件在每次更改后都会重新呈现。如果我们要优化它，这也不理想。</p>\n<p>你可以使用旧版<code class=\"language-text\">componentWillReceiveProps</code>生命周期。然而，人们经常把副作用也放在那里。这反过来又会给即将到来的并发呈现特性带来问题，比如<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">时间切片和Suspense</a>。而“更安全”的<code class=\"language-text\">getDerivedStateFromProps</code>方法很笨重。</p>\n<p>让我们退一步吧。实际上，我们想要<a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>memoization</em></a>。我们有一些输入，除非输入发生变化，否则我们不想重新计算输出。</p>\n<p>使用类，你可以使用<a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">帮助</a>程序进行记忆。但是，Hooks更进了一步，为你提供了一种内置方法去记忆昂贵的计算：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> textColor <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span> <span class=\"token comment\">// ✅ Don’t recalculate until `color` changes</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> color <span class=\"token operator\">+</span> <span class=\"token string\">' Button-text-'</span> <span class=\"token operator\">+</span> textColor<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这就是你需要的所有代码！</p>\n<p>在类的组件中，你可以使用<a href=\"https://github.com/alexreardon/memoize-one\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">memoize-one</code></a>之类的帮助程序。在函数组件中，<code class=\"language-text\">useMemo</code> Hook为你提供类似的功能。</p>\n<p>现在我们看到，<strong>即使优化昂贵的计算，也不是将props复制到状态的好理由。</strong> 我们的渲染结果应该遵守props的变化。</p>\n<hr>\n<h3 id=\"不要在副作用中停止数据流\"><a href=\"#%E4%B8%8D%E8%A6%81%E5%9C%A8%E5%89%AF%E4%BD%9C%E7%94%A8%E4%B8%AD%E5%81%9C%E6%AD%A2%E6%95%B0%E6%8D%AE%E6%B5%81\" aria-label=\"不要在副作用中停止数据流 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不要在副作用中停止数据流</h3>\n<p>到目前为止，我们已经讨论过如何使渲染结果与props变化保持一致。避免将道具复制到状态是其中的一部分。但是，重要的是 <strong>副作用（例如数据提取）也是数据流的一部分。</strong> </p>\n<p>考虑一下这个React组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchResults</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do the fetching...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'http://myapi/results?query'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很多React组件都是这样的 - 但如果我们看得更细一点，我们会发现一个bug。<code class=\"language-text\">fetchResults</code>方法使用<code class=\"language-text\">query</code>prop来获取数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'http://myapi/results?query'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是如果<code class=\"language-text\">query</code> prop发生了变化呢？在我们的组件中，什么都不会发生。<strong>这意味着我们组件的副作用不会遵守其props的变化。</strong> 这是React应用程序中非常常见的错误来源。</p>\n<p>为了修复我们的组件，我们需要：</p>\n<ul>\n<li>\n<p>查看<code class=\"language-text\">componentDidMount</code>以及从中调用的每个方法。</p>\n<ul>\n<li>在我们的示例中，是<code class=\"language-text\">fetchResults</code>和<code class=\"language-text\">getFetchUrl</code>。</li>\n</ul>\n</li>\n<li>\n<p>记下这些方法使用的所有props和状态。</p>\n<ul>\n<li>在我们的例子中，这就是<code class=\"language-text\">this.props.query</code>。</li>\n</ul>\n</li>\n<li>\n<p>确保每当props改变时，我们重新运行副作用。</p>\n<ul>\n<li>我们可以通过添加<code class=\"language-text\">componentDidUpdate</code>方法来实现。</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchResults</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>query <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ✅ Refetch on change</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do the fetching...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'http://myapi/results?query'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Updates are handled</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们的代码遵守 props 的所有变化，甚至是副作用。</p>\n<p>然而, 记住不要再打破它是很具有挑战性的。例如，我们可能会将<code class=\"language-text\">currentPage</code>添加到本地状态，并在<code class=\"language-text\">getFetchUrl</code>中使用它：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchResults</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    currentPage<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>query <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do the fetching...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'http://myapi/results?query'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query <span class=\"token operator\">+</span>\n      <span class=\"token string\">'&amp;page='</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage <span class=\"token comment\">// 🔴 Updates are ignored</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>唉，我们的代码再次出错，因为我们的副作用不遵守对<code class=\"language-text\">currentPage</code>的更改。</p>\n<p><strong>props和状态是React数据流的一部分。渲染和副作用都应该反映数据流的变化，而不是忽略它们！</strong></p>\n<p>要修复我们的代码，我们可以重复上述步骤：</p>\n<ul>\n<li>\n<p>查看<code class=\"language-text\">componentDidMount</code>以及从中调用的每个方法。</p>\n<ul>\n<li>在我们的示例中，是<code class=\"language-text\">fetchResults</code>和<code class=\"language-text\">getFetchUrl</code>。</li>\n</ul>\n</li>\n<li>\n<p>记下这些方法使用的所有props和状态。</p>\n<ul>\n<li>在我们的例子中，这就是<code class=\"language-text\">this.props.query</code> <strong>和 <code class=\"language-text\">this.state.currentPage</code></strong> 。</li>\n</ul>\n</li>\n<li>\n<p>确保每当props改变时，我们重新运行副作用。</p>\n<ul>\n<li>我们可以通过添加<code class=\"language-text\">componentDidUpdate</code>方法来实现。</li>\n</ul>\n</li>\n</ul>\n<p>让我们修复我们的组件来处理<code class=\"language-text\">currentPage</code>状态的更新：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchResults</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    currentPage<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      prevState<span class=\"token punctuation\">.</span>currentPage <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage <span class=\"token operator\">||</span> <span class=\"token comment\">// ✅ Refetch on change</span>\n      prevProps<span class=\"token punctuation\">.</span>query <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do the fetching...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'http://myapi/results?query'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>query <span class=\"token operator\">+</span>\n      <span class=\"token string\">'&amp;page='</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage <span class=\"token comment\">// ✅ Updates are handled</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>如果我们能以某种方式自动捕捉这些错误，那不是很好吗？</strong> 这不是linter能帮我们的吗?</p>\n<hr>\n<p>不幸的是，自动检查类组件的一致性太困难了。任何方法都可以调用任何其他方法。静态地分析来自<code class=\"language-text\">componentDidMount</code>和<code class=\"language-text\">componentDidUpdate</code>的调用充满了误报。</p>\n<p>但是，<em>可以</em> 设计一个可以静态分析一致性的API。<a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React <code class=\"language-text\">useEffect</code> Hook</a>就是这样一个API的一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">SearchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentPage<span class=\"token punctuation\">,</span> setCurrentPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Do the fetching...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'http://myapi/results?query'</span> <span class=\"token operator\">+</span> query <span class=\"token operator\">+</span>\n        <span class=\"token string\">'&amp;page='</span> <span class=\"token operator\">+</span> currentPage\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>currentPage<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Refetch on change</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们将逻辑放在效果(effect)中，这样可以更容易地看到它依赖的<em>React数据流中的哪些值</em> 。这些值称为“依赖项”，在我们的示例中它们是<code class=\"language-text\">[currentPage, query]</code>。</p>\n<p>请注意，这个“效果依赖项”数组实际上并不是一个新概念。在类中，我们必须通过所有方法调用搜索这些“依赖项”。<code class=\"language-text\">useEffect</code> API只是明确了相同的概念。</p>\n<p>反过来，这可以让我们自动验证它们：</p>\n<p><img src=\"https://overreacted.io/useeffect-bc7a074c528f3b0be1b7e509b6a8683b.gif\"></p>\n<p>(这是<em>一个新推荐的<code class=\"language-text\">exhaustive-deps</code> lint规则的演示，它是<code class=\"language-text\">eslint-plugin-react-hooks</code>的一部分</em>。它很快将包含在<em>Create React App</em>中。)</p>\n<p><strong>请注意，无论是将组件编写为类还是函数，都必须遵守效果的所有prop和state更新。</strong></p>\n<p>使用类API，你必须自己考虑一致性，并验证<code class=\"language-text\">componentDidUpdate</code>是否处理对每个相关prop或state的更改。否则，你的组件对prop和状态更改不具有弹性。这甚至不是特定于React的问题。它适用于任何允许你单独处理“创建”和“更新”的UI库。</p>\n<p><strong><code class=\"language-text\">useeffect</code> API通过鼓励一致性来翻转默认值。</strong> <a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一开始可能会感到陌生</a>，但结果是你的组件对逻辑更改更具弹性。由于“依赖关系”现在是明确的，我们可以使用lint规则验证效果是否一致。我们用一个linter来捕获bug！</p>\n<hr>\n<h3 id=\"不要在优化中停止数据流\"><a href=\"#%E4%B8%8D%E8%A6%81%E5%9C%A8%E4%BC%98%E5%8C%96%E4%B8%AD%E5%81%9C%E6%AD%A2%E6%95%B0%E6%8D%AE%E6%B5%81\" aria-label=\"不要在优化中停止数据流 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不要在优化中停止数据流</h3>\n<p>还有一种情况，你可能会意外地忽略对props的更改。当你手动优化组件时，可能会发生此错误。</p>\n<p>s请注意，使用类似<code class=\"language-text\">pureComponent</code>和<code class=\"language-text\">react.memo</code>这样的浅比较的优化方法作为默认比较是安全的。</p>\n<p><strong>但是，如果你尝试通过编写自己的比较来“优化”组件，则可能会错误地忘记比较函数props：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴 Doesn't compare this.props.onClick </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> onClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Doesn't reflect updates</span>\n    <span class=\"token keyword\">const</span> textColor <span class=\"token operator\">=</span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span> <span class=\"token string\">' Button-text-'</span> <span class=\"token operator\">+</span> textColor<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一开始很容易忽略这个错误，因为在类中，你通常会传递一个<em>方法</em>，所以无论如何它都具有相同的标识:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ✅ Always the same function</span>\n    <span class=\"token comment\">// Do something</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>green<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Press me\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以我们的优化不会立即中断。然而，如果它随着时间的推移而改变，它将继续“看到”旧的<code class=\"language-text\">onClick</code>值，但其他props没有改变：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isEnabled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isEnabled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do something</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>green<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 🔴 Button ignores updates to the onClick prop</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n          Press me\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在此示例中，单击该按钮应禁用它 - 但这不会发生，因为<code class=\"language-text\">Button</code>组件忽略对<code class=\"language-text\">onClick</code> prop的任何更新。</p>\n<p>如果函数标识本身依赖于可能随时间变化的内容，例如本示例中的<code class=\"language-text\">draft.content</code>，则可能会更加混乱：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">drafts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>draft <span class=\"token operator\">=></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span>\n      <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>blue<span class=\"token punctuation\">'</span></span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>draft<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 🔴 Button ignores updates to the onClick prop</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePublish<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> draft<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Publish\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>虽然<code class=\"language-text\">draft.content</code>可能会随着时间的推移而发生变化，但我们的<code class=\"language-text\">Button</code>组件忽略了对<code class=\"language-text\">onClick</code> prop的更改，因此它将继续看到<code class=\"language-text\">onClick</code>绑定方法的“第一版”和原始<code class=\"language-text\">draft.content</code>。</p>\n<p><strong>那么我们如何避免这个问题呢？</strong></p>\n<p>我建议避免手动实现<code class=\"language-text\">shouldComponentUpdate</code>并避免指定<code class=\"language-text\">React.memo()</code>的自定义比较。<code class=\"language-text\">React.memo</code>中的默认浅比较将遵守更改的函数标识：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> textColor <span class=\"token operator\">=</span> <span class=\"token function\">slowlyCalculateTextColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Button-'</span> <span class=\"token operator\">+</span> color <span class=\"token operator\">+</span> <span class=\"token string\">' Button-text-'</span> <span class=\"token operator\">+</span> textColor<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> </code></pre></div>\n<p>在类中，<code class=\"language-text\">PureComponent</code>具有相同的行为。</p>\n<p>这确保了将不同的函数作为prop传递将始终有效。</p>\n<p>如果你坚持自定义一个比较，<strong>请确保你不要跳过函数</strong> ：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ✅ Compares this.props.onClick </span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">.</span>color <span class=\"token operator\">||</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">.</span>onClick\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>正如我前面提到的，在类组件中很容易忽略这个问题，因为方法标识通常是稳定的(但并不总是稳定的——这就是bug变得难以调试的地方)。有了Hooks，情况有点不同：</p>\n<ol>\n<li>每个渲染的函数都不同，因此你可以<a href=\"https://github.com/facebook/react/issues/14972#issuecomment-468280039\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">立即</a>发现此问题。</li>\n<li>使用<code class=\"language-text\">useCallback</code>和<code class=\"language-text\">useContext</code>，你可以<a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完全避免传递函数</a>。这使您可以优化渲染而无需担心函数。</li>\n</ol>\n<hr>\n<p>总结本节，<strong>不要停止数据流！</strong></p>\n<p>无论何时使用props和状态，请考虑如果它们发生变化会发生什么。在大多数情况下，组件不应以不同方式处理初始渲染和更新。这使它能够适应逻辑上的变化。</p>\n<p>对于类，在生命周期方法中使用props和state时很容易忘记更新。Hooks会督促你去做正确的事情——但是如果你还不习惯这样做的话，就需要一些心理上的调整。</p>\n<hr>\n<h2 id=\"原则2：始终准备好渲染\"><a href=\"#%E5%8E%9F%E5%88%992%EF%BC%9A%E5%A7%8B%E7%BB%88%E5%87%86%E5%A4%87%E5%A5%BD%E6%B8%B2%E6%9F%93\" aria-label=\"原则2：始终准备好渲染 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原则2：始终准备好渲染</h2>\n<p>React组件使你可以编写渲染代码而无需担心花费太多时间。你描述了UI在任何给定时刻 <em>应该</em> 展现的外观，而React使它成为现实。好好利用吧！</p>\n<p>不要试图在组件行为中引入不必要的时间假设。<strong>你的组件应该随时可以重新渲染。</strong> </p>\n<p>怎样才能违反这一原则？React并不容易实现，但您可以通过使用遗留组件willReceiveProps生命周期方法来实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 🔴 Resets local state on every parent render</span>\n  <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> nextProps<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个例子中，我们将<code class=\"language-text\">value</code>保存在本地状态，但我们也从props获得<code class=\"language-text\">value</code>。每当我们“收到新props”时，我们都会重置状态内的<code class=\"language-text\">value</code>。</p>\n<p><strong>这种模式的问题在于它完全依赖于偶然的时间安排。</strong></p>\n<p>也许今天这个组件的父组件很少更新，所以我们的<code class=\"language-text\">TextInput</code>只在一些重要的事情发生时“接收props”，比如保存表单。</p>\n<p>但是明天你可能会向<code class=\"language-text\">TextInput</code>的父级添加一些动画。如果它的父级经常重新渲染，它将继续“<a href=\"https://codesandbox.io/s/m3w9zn1z8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">吹走</a>”子级状态！你可以在“<a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你可能不需要派生状态</a>”中阅读有关此问题的更多信息。</p>\n<p><strong>那我们怎么解决这个问题呢？</strong></p>\n<p>首先，我们需要修复我们的心理模型。我们需要停止将“接收props”视为与“渲染”不同的东西。由父级引起的重新渲染不应与由我们自己的本地状态更改引起的重新渲染不同。<strong>组件应该能够弹性的地进行较少或更频繁的渲染，因为否则它们会与特定的父对象过度耦合。</strong> </p>\n<p>(<a href=\"https://codesandbox.io/s/m3w9zn1z8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个演示</a><em>展示了重新渲染如何破坏脆弱的组件</em>。)</p>\n<p>当你<em>真正</em>想从props中派生状态时，有几种<a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#preferred-solutions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不同</a>的<a href=\"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解决方案</a>，通常你应该使用完全受控的组件:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Option 1: Fully controlled component.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">TextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> onChange <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>或者你可以使用一个不受控制的组件和一个键来重置它:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Option 2: Fully uncontrolled component.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">TextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// We can reset its internal state later by changing the key:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextInput</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>formId<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>本节的内容是，你的组件不应该因为它或其父级更频繁地重新渲染而中断。如果你避免使用传统的<code class=\"language-text\">componentWillReceiveProps</code>生命周期方法，则React API设计可以轻松实现。</p>\n<p>要对组件进行压力测试，可以将此代码临时添加到其父级：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Don't forget to remove this immediately!</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>不要留下这些代码</strong>  - 这只是一种快速的方法，可以检查当父级重新渲染的次数超出预期时会发生什么。它不应该打破子级！</p>\n<hr>\n<p>你可能会想：“我会在props改变时继续重置状态，但会阻止使用<code class=\"language-text\">PureComponent</code>进行不必要的重新渲染”。</p>\n<p>这段代码应该有用，对吧？</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 🤔 Should prevent unnecessary re-renders... right?</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 🔴 Resets local state on every parent render</span>\n  <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> nextProps<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>起初，看起来这个组件似乎解决了在父级重新渲染时“吹走”状态的问题。毕竟，如果props是相同的，我们只是跳过更新 - 因此不会调用<code class=\"language-text\">componentWillReceiveProps</code>。</p>\n<p>但是，这给了我们一种虚假的安全感。<strong>这个组件仍然不能适应prop改变。</strong>  例如，如果我们添加<em>另一个</em>经常变化的prop，比如动画<code class=\"language-text\">style</code>，我们仍然会“丢失”内部状态:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextInput</span>\n  <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>opacity<span class=\"token punctuation\">:</span> someValueFromState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴 componentWillReceiveProps in TextInput</span>\n    <span class=\"token comment\">// resets to this value on every animation tick.</span>\n    value\n  <span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>所以这种方法仍然存在缺陷。我们可以看到，不应使用<code class=\"language-text\">PureComponent</code>，<code class=\"language-text\">shouldComponentUpdate</code>和<code class=\"language-text\">React.memo</code>等各种优化来控制<em>行为</em>。 只在有帮助的地方使用它们来提高<em>性能</em>。如果删除一个优化会破坏一个组件，那么它就太脆弱了。</p>\n<p>这里的解决方案与我们之前描述的相同。不要将“接受道具”视为特殊事件。避免“同步”props和状态。在大多数情况下，每个值都应该完全控制（通过props），或完全不受控制（在本地状态）。<a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#preferred-solutions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">尽可能</a>避免派生状态。<strong>并随时准备渲染！</strong></p>\n<h2 id=\"原则3：没有组件是单例的\"><a href=\"#%E5%8E%9F%E5%88%993%EF%BC%9A%E6%B2%A1%E6%9C%89%E7%BB%84%E4%BB%B6%E6%98%AF%E5%8D%95%E4%BE%8B%E7%9A%84\" aria-label=\"原则3：没有组件是单例的 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原则3：没有组件是单例的</h2>\n<p>有时我们假设某个组件只显示一次。如导航栏。这可能在一段时间内是正确的。然而，这种假设常常会导致设计问题，而这些问题要到很久以后才会浮出水面。</p>\n<p>例如，你可能需要在路由更改(上一<code class=\"language-text\">Page</code>和下一<code class=\"language-text\">Page</code>)的两个<code class=\"language-text\">Page</code>组件之间实现动画。它们都需要在动画期间挂载(mounted)。但是，你可能会发现，每个组件都假定它是屏幕上唯一的页面。</p>\n<p>检查这些问题很容易。只是为了好玩，尝试渲染你的应用程序两次:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyApp</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyApp</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>点击他。(在这个实验中，你可能需要调整一些CSS。)</p>\n<p><strong>你的应用仍然按预期运行吗？</strong> 你看到奇怪的崩溃和错误吗？偶尔对复杂组件进行压力测试是一个好主意，并确保它们的多个副本不会相互冲突。</p>\n<p>我自己写过几次的一个有问题的模式的例子是在<code class=\"language-text\">componentWillUnmount</code>中执行全局状态“清理”:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Resets something in Redux store</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，如果页面上有两个这样的组件，卸载其中一个组件会破坏另一个组件。在<em>mount</em>上重置“全局”状态也好不到哪里去:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Resets something in Redux store</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这种情况下，<em>mounting</em>第二个form将破坏第一个form。</p>\n<p>这些模式很好地指示了我们的组件在哪些地方是脆弱的。<strong>显示或隐藏树不应该破坏该树之外的组件。</strong> </p>\n<p>无论你是否计划将此组件呈现两次，从长远来看，解决这些问题都是值得的。它会让你的设计更具弹性。</p>\n<h2 id=\"原则4：保持本地状态隔离\"><a href=\"#%E5%8E%9F%E5%88%994%EF%BC%9A%E4%BF%9D%E6%8C%81%E6%9C%AC%E5%9C%B0%E7%8A%B6%E6%80%81%E9%9A%94%E7%A6%BB\" aria-label=\"原则4：保持本地状态隔离 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原则4：保持本地状态隔离</h2>\n<p>考虑社交媒体<code class=\"language-text\">Post</code>组件。它有一个<code class=\"language-text\">Comment</code>列表（可以展开）和一个<code class=\"language-text\">NewComment</code>输入框。</p>\n<p>React组件可能具有本地状态。但是哪个状态才是本地的？帖子内容本身是否为本地状态？那么评论列表呢？或者扩展的评论的记录？或评论框输入的值？</p>\n<p>如果你习惯了把一切都放在“状态管理器”中，那么回答这个问题可能会很有挑战性。所以这是一个简单的决定方式。</p>\n<p><strong>如果你不确定某个状态是否属于本地状态，请问自己：“如果这个组件被渲染两次，那么这种互动是否会反映在另一个副本中？” 每当答案为“否”时，你就会找到一些本地的状态。</strong></p>\n<p>例如，假设我们渲染了相同的<code class=\"language-text\">Post</code>两次。让我们看看它里面不同的可以改变的东西。</p>\n<ul>\n<li><em>Post content.</em> 我们想要在一棵树中编辑帖子(post)以在另一棵树中更新它。因此，它可能 <strong>不应该</strong> 是<code class=\"language-text\">Post</code>组件的本地状态。(相反，帖子内容可能存在于Apollo，Relay或Redux等缓存中。)</li>\n<li><em>List of comments.</em> 这类似于post content。我们希望在一棵树中添加一条新评论，以反映在另一棵树中。理想情况下，我们会为它使用某种缓存，它 <strong>不应该</strong> 是我们<code class=\"language-text\">Post</code>的本地状态。</li>\n<li><em>Which comments are expanded.</em> 如果在一个树中展开评论也会在另一个树中展开，这将会很奇怪。在本例中，我们使用的是特定的<code class=\"language-text\">Comment</code>UI <em>表示</em> ，而不是抽象的“评论实体”。因此，“展开”标志 <strong>应该</strong> 是<code class=\"language-text\">Comment</code>的本地状态。</li>\n<li><em>The value of new comment input.</em> 如果在一个输入中键入评论也会更新另一个树中的输入，那将会很奇怪。除非输入明确地组合在一起，否则通常人们期望它们是独立的。因此输入值 <strong>应该</strong> 是<code class=\"language-text\">NewComment</code>组件的本地状态。</li>\n</ul>\n<p>我不建议对这些规则进行教条式的解释。当然，在一个更简单的应用程序中，你可能希望对所有内容都使用本地状态，包括那些“缓存”。我只是从<a href=\"https://github.com/xiaohesong/TIL/blob/master/front-end/react/overreact/ui-element-problem-and-build-yourself.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">最基本的原则</a>谈起理想的用户体验。</p>\n<p><strong>避免让真正的本地状态全局化。</strong> 这就涉及到我们的“弹性”主题： 组件之间很少发生同步。另外，这还修复了大量的性能问题。当你的状态处于正确的位置时，“过度渲染”就不是什么问题了。</p>\n<h2 id=\"概括\"><a href=\"#%E6%A6%82%E6%8B%AC\" aria-label=\"概括 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概括</h2>\n<p>让我们再一次回顾这些原则：</p>\n<ol>\n<li><a href=\"#%E5%8E%9F%E5%88%991%E4%B8%8D%E8%A6%81%E5%81%9C%E6%AD%A2%E6%95%B0%E6%8D%AE%E6%B5%81\">不要停止数据流</a>。props和状态可以改变，组件应该在发生时处理这些改变。</li>\n<li><a href=\"#%E5%8E%9F%E5%88%992%E5%A7%8B%E7%BB%88%E5%87%86%E5%A4%87%E5%A5%BD%E6%B8%B2%E6%9F%93\">始终准备渲染</a>。组件不应该破坏，因为它或多或少经常呈现。</li>\n<li><a href=\"#%E5%8E%9F%E5%88%993%E6%B2%A1%E6%9C%89%E7%BB%84%E4%BB%B6%E6%98%AF%E5%8D%95%E4%BE%8B%E7%9A%84\">没有组件是单例的</a>。即使一个组件只渲染一次，如果渲染两次不会破坏它，那么你的设计也会得到改进。</li>\n<li><a href=\"#%E5%8E%9F%E5%88%994%E4%BF%9D%E6%8C%81%E6%9C%AC%E5%9C%B0%E7%8A%B6%E6%80%81%E9%9A%94%E7%A6%BB\">保持本地状态隔离</a>。考虑哪个状态是特定UI表示的本地状态——不要将该状态提升到不必要的高度。</li>\n</ol>\n<p><strong>这些原则可帮助你编写<a href=\"https://overreacted.io/optimized-for-change/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">优化更改</a>的组件。很容易添加、更改和删除它们。</strong></p>\n<p>最重要的是，一旦我们的组件恢复了弹性，我们就会回到一个紧迫的两难境地，即props是否应该按字母排序。</p>","frontmatter":{"title":"编写可伸缩组件","date":"March 19, 2019","description":"编写一个可伸缩的组件，具有弹性，可拓展"}}},"pageContext":{"slug":"/hi-folks/","previous":null,"next":null}}